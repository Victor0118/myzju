`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    15:43:52 03/31/2015 
// Design Name: 
// Module Name:    top 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module top(CCLK, SW, BTNN, BTNE,BTNW, //BTN2_IN, BTN3_IN,
	LCDE, LCDRS, LCDRW, LCDDAT,LED
);
	input wire CCLK;
	input wire [3:0] SW;
	input wire BTNN,BTNE,BTNW;//,BTN2_IN,BTN3_IN;
	output wire LCDE, LCDRS, LCDRW;
	output wire [3:0] LCDDAT;
	output wire [7:0] LED;
	
	wire btnclk;
	wire rst;
	reg sw_reg32;
	wire btsw;
	assign LED[3:0]=SW[3:0];
	assign LED[4]=btnclk;
	assign LED[5]=rst;
	assign LED[6]=btsw;
	
	always @(posedge btsw or posedge rst)
	begin
		if(rst)
			sw_reg32<=0;
		else
			sw_reg32<=~sw_reg32;
	end
	
	wire [31:0] instr;
	wire [5:0] op, func;
	wire [4:0] rs,rt,rd,shamt;
	wire [15:0] imm;
	wire [25:0] addr;
	wire [31:0] saout;
	wire JR, J, JAL, LW, WREG, WMEM, RDorRT, SE, SA, IR, IorR, BJ;
	wire [4:0] Aluc;
	wire [31:0] a, b, aluresult;	//alu in/out
	wire [4:0] r1, r2, r3, w1;	//Reg
	wire [31:0] d1, d2, d3, wdata;	//Reg
	wire [31:0] seout;	//signed extended
	wire [31:0] pcplus4, pcin, pcout, immaddr, jaddr;
	wire [31:0] memdata;
	wire equal_result;

	wire [31:0] dis_data;
	wire [7:0] dis_addr;
	assign dis_data=(sw_reg32)?instr:d3;
	assign dis_addr=(sw_reg32)?{7'b00100001}:{3'b000,r3};

	assign op=instr[31:26];
	assign rs=instr[25:21];
	assign rt=instr[20:16];
	assign rd=instr[15:11];
	assign shamt=instr[10:6];
	assign func=instr[5:0];
	assign imm=instr[15:0];
	assign addr=instr[25:0];
	assign saout={27'b0,shamt};
	
	assign r2=rt;
	assign r3={sw_reg32,SW};
	
	anti_jitter at0(.clk(CCLK),.rst(rst),.sig_i(BTNN),.sig_o(btnclk));
	assign rst=BTNE;//anti_jitter at1(.clk(CCLK),.rst(rst),.sig_i(BTNE),.sig_o(rst));
	anti_jitter at2(.clk(CCLK),.rst(rst),.sig_i(BTNW),.sig_o(btsw));

	cpu_ctl cpu_ctl(
		.op(op), .func(func), .equal_result(equal_result),
		.JR(JR), .J(J), .JAL(JAL), .LW(LW),
		.WREG(WREG), .WMEM(WMEM),. RDorRT(RDorRT),
		.SE(SE), .SA(SA), .IR(IR), .IorR(IorR), .BJ(BJ),
		.Aluc(Aluc)
	);
	
	instrmem instrmem(
		.clka(CCLK),.addra(pcout[11:2]),.douta(instr[31:0])
	);	
	
	Data_Mem Data_Mem(
		.clka(CCLK),.wea(WMEM),.addra(aluresult[11:2]),.dina(d2),.douta(memdata)
	);
	
	reg32 reg32(
		.clk(btnclk), .rst(rst), .wea(WREG),
		.r1(r1), .r2(r2), .r3(r3), .w1(w1),
		.wdata(wdata), .out1(d1), .out2(d2), .out3(d3)
    );

	alu alu(
		.a(a), .b(b), .aluc(Aluc), .result(aluresult)
	);

	imm_addr imm_addr(
		.imm(imm), .pc(pcplus4), .out(immaddr)
	);

	j_addr j_addr(
		.addr(addr), .pc(pcplus4), .out(jaddr)
	);

	isequal isequal(
		.in1(d1), .in2(d2), .result(equal_result)
    );

	pc_plus4 pc_plus4(
		.i_pc(pcout), .o_pc(pcplus4)
    );

	pc pc(
    	.clk(btnclk), .rst(rst), .i_pc(pcin), .o_pc(pcout)
	);
	 
	se se(
		.in(imm), .SE(SE), .out(seout)
    );

	decode2_32 alu_b(
		.in1(seout), .in2(d2), .c(IorR), .out(b)
	);

	decode2_32 alu_a(
		.in1(saout), .in2(d1), .c(SA), .out(a)
	);

	decode2_5 reg_read(
		.in1(5'b11111), .in2(rs), .c(JR), .out(r1)
	);

	decode3_5 reg_write(
		.in1(5'b11111), .in2(rd), .in3(rt), .c1(JAL), .c2(RDorRT), .out(w1)
	);

	decode3_32 reg_wdata(
		.in1(pcplus4), .in2(memdata), .in3(aluresult), .c1(JAL), .c2(LW), .out(wdata)
	);

	decode4_32 pc_in(
		.in1(jaddr), .in2(d1), .in3(immaddr), .in4(pcplus4), .c1(J), .c2(JR), .c3(BJ), .out(pcin)
	);

	display display(
		.clk(CCLK), .rst(rst), .addr(dis_addr),.data(dis_data), .lcd_rs(LCDRS), .lcd_rw(LCDRW), .lcd_e(LCDE), .lcd_dat(LCDDAT)
	);

endmodule

